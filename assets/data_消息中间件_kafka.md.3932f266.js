import{_ as a,o as e,c as r,X as o}from"./chunks/framework.46c397e3.js";const t="./assets/image1.93e2d097.png",i="./assets/image2.3467a519.png",b=JSON.parse('{"title":"kafka","description":"","frontmatter":{},"headers":[],"relativePath":"data/消息中间件/kafka.md","filePath":"data/消息中间件/kafka.md","lastUpdated":null}'),n={name:"data/消息中间件/kafka.md"},p=o('<h1 id="kafka" tabindex="-1">kafka <a class="header-anchor" href="#kafka" aria-label="Permalink to &quot;kafka&quot;">​</a></h1><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><p>参考文档 <a href="https://juejin.cn/post/7146133960865611806?searchId=202403122210197FB546636F4654883876" target="_blank" rel="noreferrer">https://juejin.cn/post/7146133960865611806?searchId=202403122210197FB546636F4654883876</a></p><h3 id="官网地址" tabindex="-1">官网地址 <a class="header-anchor" href="#官网地址" aria-label="Permalink to &quot;官网地址&quot;">​</a></h3><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><h4 id="结构图" tabindex="-1">结构图 <a class="header-anchor" href="#结构图" aria-label="Permalink to &quot;结构图&quot;">​</a></h4><p><img src="'+t+'" alt="image"></p><h4 id="生产者-producer" tabindex="-1">生产者(producer) <a class="header-anchor" href="#生产者-producer" aria-label="Permalink to &quot;生产者(producer)&quot;">​</a></h4><h4 id="消费者-consumer" tabindex="-1">消费者(consumer) <a class="header-anchor" href="#消费者-consumer" aria-label="Permalink to &quot;消费者(consumer)&quot;">​</a></h4><h4 id="消费组-consumer-group" tabindex="-1">消费组(consumer group) <a class="header-anchor" href="#消费组-consumer-group" aria-label="Permalink to &quot;消费组(consumer group)&quot;">​</a></h4><p>每个消费者都有一个对应的消费组。当消息发布到主题后，只会被投递给订阅它的每个消费组中的一个消费者。</p><p>消费者数量比分区多会导致有消费者分不到分区<br> 消费者分区分配策略：RangeAssignor、RoundRobinAssignor、StickyAssignor（0.11）。</p><p><img src="'+i+'" alt="image"></p><h4 id="服务代理节点-broker" tabindex="-1">服务代理节点(broker) <a class="header-anchor" href="#服务代理节点-broker" aria-label="Permalink to &quot;服务代理节点(broker)&quot;">​</a></h4><p>可以看成是一个独立的kafka服务实例，多个broker组成了kafka集群</p><h4 id="主题-topic" tabindex="-1">主题(topic) <a class="header-anchor" href="#主题-topic" aria-label="Permalink to &quot;主题(topic)&quot;">​</a></h4><p>生产者将消息发送特定的topic主题，消费者订阅topic主题进行消费</p><h4 id="分区-partition" tabindex="-1">分区(partition) <a class="header-anchor" href="#分区-partition" aria-label="Permalink to &quot;分区(partition)&quot;">​</a></h4><p>主题是一个逻辑上的概念，它还可以细分为多个分区，一个分区只属于单个主题，很多时候也会把分区称为主题分区（Topic-Partition）。同一主题下的不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。</p><p>同一个分区中的多个副本必须分布在不同的 broker 中，这样才能提供有效的数据冗余。</p><h4 id="偏移量-offset" tabindex="-1">偏移量(offset) <a class="header-anchor" href="#偏移量-offset" aria-label="Permalink to &quot;偏移量(offset)&quot;">​</a></h4><p>offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序而不是主题有序。</p><h4 id="副本-replia" tabindex="-1">副本(replia) <a class="header-anchor" href="#副本-replia" aria-label="Permalink to &quot;副本(replia)&quot;">​</a></h4><p>使用副本机制确保消息的可靠性和容错性。每个分区可以有多个副本，其中一个是领导者副本（Leader Replica），其余是追随者副本（Follower Replica）。</p><h4 id="zookeeper" tabindex="-1">zookeeper <a class="header-anchor" href="#zookeeper" aria-label="Permalink to &quot;zookeeper&quot;">​</a></h4><p>是Kafka集群的协调服务，负责管理和维护集群的元数据、状态信息以及进行分布式协调。<br> 是 Kafka 用来负责集群元数据的管理、控制器 的选举等操作的</p><p>Kafka使用ZooKeeper主要有以下几个方面的功能：</p><p>统一协调：ZooKeeper负责协调Kafka集群中各个Broker之间的工作和通信。它维护了整个集群的元数据信息，包括Broker的状态、Topic的配置信息、消费者组的偏移量等。</p><p>Leader选举：Kafka采用分布式副本机制来确保高可用性和数据冗余。ZooKeeper负责协助进行Leader选举过程，当一个Broker宕机或不可用时，ZooKeeper会帮助Kafka选择新的Leader副本来接管该分区的读写请求。</p><p>动态扩展：Kafka集群可以动态地扩展，增加或删除Broker节点。ZooKeeper负责监控和管理Broker的上下线状态，并将这些变更通知给其他Broker和消费者。</p><p>消费者组管理：ZooKeeper存储并跟踪消费者组的偏移量信息。每个消费者在消费消息时，会将自己的偏移量提交到ZooKeeper中，以便在发生故障或重启后能够继续从上次消费的位置开始。</p><p>总结来说，ZooKeeper在Kafka中扮演着重要的角色，提供了集群的元数据管理、分布式协调、Leader选举以及消费者组管理等功能，确保了Kafka集群的高可用性、可靠性和灵活性。</p><p>后面可能会不再需要zookeeper 参考文档 <a href="https://juejin.cn/post/7341840038964002835#heading-3" target="_blank" rel="noreferrer">https://juejin.cn/post/7341840038964002835#heading-3</a></p>',33),s=[p];function h(l,c,d,k,f,u){return e(),r("div",null,s)}const _=a(n,[["render",h]]);export{b as __pageData,_ as default};
