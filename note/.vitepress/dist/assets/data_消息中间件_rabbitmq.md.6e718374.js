import{_ as a,o as e,c as n,X as s}from"./chunks/framework.6e839c56.js";const l="/assets/image-20220318100116334.ca747df7.png",o="/assets/image-20220316235306793.74c5417d.png",t="/assets/image-20220317104142386.b7d924e7.png",r="/assets/image-20220317162751843.06f94257.png",p="/assets/image-20220317163241474.400aac90.png",c="/assets/image-20220317181540968.4c2a101b.png",i="/assets/image-20220317163620486.49102962.png",C="/assets/image-20220317163703367.55f0cf08.png",A="/assets/image-20220318101537980.540f5723.png",h="/assets/image-20220317172756928.33d7eeca.png",d="/assets/image-20220316233101380.4b98599b.png",b="/assets/image-20220316225604529.0d5b1e6b.png",m="/assets/image-20220316233409456.0aefd5f6.png",y="/assets/image-20220316233902333.80c8203e.png",u="/assets/image-20220316225727055.7f9f7c93.png",g="/assets/image-20220316234203678.750e1193.png",D="/assets/image-20220316225212741.e1b85daa.png",v="/assets/image-20220316225749075.d139dc6e.png",f="/assets/image-20220316234255805.1a1db4c9.png",k="/assets/image-20221114103228605.a161e4c1.png",q="/assets/image-20220318102357535.9579d05b.png",E=JSON.parse('{"title":"rabbitmq","description":"","frontmatter":{},"headers":[],"relativePath":"data/消息中间件/rabbitmq.md","filePath":"data/消息中间件/rabbitmq.md"}'),F={name:"data/消息中间件/rabbitmq.md"},x=s('<h1 id="rabbitmq" tabindex="-1">rabbitmq <a class="header-anchor" href="#rabbitmq" aria-label="Permalink to &quot;rabbitmq&quot;">​</a></h1><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><h3 id="官网地址" tabindex="-1">官网地址 <a class="header-anchor" href="#官网地址" aria-label="Permalink to &quot;官网地址&quot;">​</a></h3><blockquote><p><a href="https://www.rabbitmq.com/" target="_blank" rel="noreferrer">https://www.rabbitmq.com/</a></p></blockquote><h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><blockquote><h4 id="结构图" tabindex="-1">结构图 <a class="header-anchor" href="#结构图" aria-label="Permalink to &quot;结构图&quot;">​</a></h4><blockquote><p><img src="'+l+'" alt="image-20220318100116334"></p></blockquote><h4 id="_1-代理-broker" tabindex="-1">① 代理(broker) <a class="header-anchor" href="#_1-代理-broker" aria-label="Permalink to &quot;① 代理(broker)&quot;">​</a></h4><blockquote><p>用来处理数据的消息队列服务器实体<br> broker 是指一个或多个 erlang node 的逻辑分组，且 node 上运行着 RabbitMQ 应用程序。cluster 是在 broker 的基础之上，增加了 node 之间共享元数据的约束</p></blockquote><h4 id="_2-虚拟主机-vhost" tabindex="-1">② 虚拟主机(vhost) <a class="header-anchor" href="#_2-虚拟主机-vhost" aria-label="Permalink to &quot;② 虚拟主机(vhost)&quot;">​</a></h4><blockquote><p>由RabbitMQ服务器创建的虚拟消息主机，拥有自己的权限机制，一个broker里可以开设多个vhost，用于不同用户的权限隔离，vhost之间是也完全隔离的。</p></blockquote><h4 id="_3-amqp协议" tabindex="-1">③ AMQP协议 <a class="header-anchor" href="#_3-amqp协议" aria-label="Permalink to &quot;③  AMQP协议&quot;">​</a></h4><blockquote><p>Advanced Message Queuing Protocol 高级消息队列协议<br> ① Server： 又称Broker，接收客户端的连接，实现AMQP实体服务<br> ② Connection： 连接，应用程序跟Broker的连接<br> ③ channel： 网络信道，几乎所有的操作都在channel中进行，channel是进行消息读写的通道。客户端可以建立多个channel，每个channel代表一个会话任务。<br> ④ Message： 消息，服务器与应用程序之间传递的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级，延迟等高级特性；Body消息内容。<br> ⑤ Virtual host： 虚拟主机，用于进行逻辑隔离，最上层的消息路由。一个Virtual host里面可以有若干个Exchange和Queue，同一个Virtual host里面不能有相同名称的Exchange或Queue。<br> ⑥ Exchange： 交换机，接收消息，根据路由键转发消息到绑定的队列。<br> ⑦ Bingding： Exchange和Queue之间的虚拟连接，bingding中可以包含路由key。<br> ⑧ Routing key： 一个路由规则，虚拟机可用它来确定如何路由一个特定的消息。<br> ⑨ Queue： 也称为Message Queue，消息队列，保存消息并将它转发给消费者。</p></blockquote><h4 id="_4-交换机类型" tabindex="-1">④ 交换机类型 <a class="header-anchor" href="#_4-交换机类型" aria-label="Permalink to &quot;④ 交换机类型&quot;">​</a></h4><blockquote><p>直接（Direct）：直接交换机通过消息上的路由键直接对消息进行分发。<br> 扇出（Fanout）：一个扇出交换机会将消息发送到所有和它进行绑定的队列上。<br> 主题（Topic）：这个交换机会将路由键和绑定上的模式进行通配符匹配。<br> 消息头（Headers）：消息头交换机使用消息头的属性进行消息路由。 <br><br><img src="'+o+'" alt="image-20220316235306793"><br></p><h5 id="_1、direct-exchange" tabindex="-1">1、direct exchange <a class="header-anchor" href="#_1、direct-exchange" aria-label="Permalink to &quot;1、direct exchange&quot;">​</a></h5><blockquote><p>需要精准匹配routing_key</p></blockquote><h5 id="_2、topic-exchange" tabindex="-1">2、topic exchange <a class="header-anchor" href="#_2、topic-exchange" aria-label="Permalink to &quot;2、topic exchange&quot;">​</a></h5><blockquote><p>允许模糊匹配routing_key,注意<em>和#，可以用来实现组播 路由关键字可包含任意多的单词，但最高限制是255字节。 绑定的关键字必须有相同的格式。topic交换机和direct交换的逻辑是相似的–拥有特定的路由关键字的消息将被发送到所有匹配关键字的队列。然而，绑定关键字有两个特殊的情况： （1）</em> (星号) 可以代替一个完整的单词. （2）# (井号) 可以代替零个或多个单词.</p></blockquote><h5 id="_3、fanout-exchange" tabindex="-1">3、fanout exchange <a class="header-anchor" href="#_3、fanout-exchange" aria-label="Permalink to &quot;3、fanout exchange&quot;">​</a></h5><blockquote><p>没有routing_key的概念，广播所以binding的queue</p></blockquote></blockquote><h4 id="_5-features-功能" tabindex="-1">⑤ Features 功能？？ <a class="header-anchor" href="#_5-features-功能" aria-label="Permalink to &quot;⑤ Features 功能？？&quot;">​</a></h4><blockquote><p>D：d 是 durable 的缩写，代表这个队列中的消息支持持久化。 AD：ad 是 autoDelete 的缩写。代表当前队列的最后一个消费者退订时被自动删除。注意：此时不管队列中是否还存在消息，队列都会删除。 excl：是 exclusive 的缩写。代表这是一个排他队列。如果一个队列被声明为排他队列，该队列仅对首次声明它的连接可见，并在连接断开时自动删除。这里需要注意三点：其一，排他队列是基于连接可见的，同一连接的不同信道是可以同时访问同一个连接创建的排他队列的。其二，“首次”，如果一个连接已经声明了一个排他队列，其他连接是不允许建立同名的排他队列的，这个与普通队列不同。其三，即使该队列是持久化的，一旦连接关闭或者客户端退出，该排他队列都会被自动删除的。这种队列适用于只限于一个客户端发送读取消息的应用场景。 Args：是 arguments 的缩写。代表该队列配置了 arguments 参数。</p><p>TTL：是 x-message-ttl 的缩写。设置队列中的所有消息的生存周期(统一为整个队列的所有消息设置生命周期), 也可以在发布消息的时候单独为某个消息指定剩余生存时间，单位毫秒。 Exp：Auto Expire，是 x-expires 配置的缩写。当队列在指定的时间没有被访问(consume, basicGet, queueDeclare…)就会被删除，Features=Exp。注意这里是删除队列，不是队列中的消息。 Lim：说明该队列配置了 x-max-length。限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉。 Lim B：说明队列配置了 x-max-length-bytes。限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小。 DLX：说明该队列配置了 x-dead-letter-exchange。当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉。</p></blockquote><blockquote><p>DLK：x-dead-letter-routing-key 的缩写，将删除的消息推送到指定交换机的指定路由键的队列中去。 Pri：x-max-priority 的缩写，优先级队列。表明该队列支持优先级，先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费。 Ovfl：x-overflow 的缩写。队列中的消息溢出时，如何处理这些消息。要么丢弃队列头部的消息，要么拒绝接收后面生产者发送过来的所有消息。有两个配置项：drop-head，代表丢弃队列头部的消息，默认行为；reject-publish 设置队列中的消息溢出后,该队列的行为:”拒绝接收”(所有消息)。 ha-all：镜像队列。all 表示镜像到集群上的所有节点，ha-params 参数忽略。</p></blockquote><h4 id="_6-connection" tabindex="-1">⑥ connection <a class="header-anchor" href="#_6-connection" aria-label="Permalink to &quot;⑥ connection&quot;">​</a></h4><blockquote><p>应用程序和 RMQ 之间建立 long-lived connection Connection 会占用 OS 文件句柄资源</p></blockquote><h4 id="_7-channel" tabindex="-1">⑦ channel <a class="header-anchor" href="#_7-channel" aria-label="Permalink to &quot;⑦ channel&quot;">​</a></h4><blockquote><p>应⽤程序对 RMQ 提交的操作都是基于 channel 的，当使⽤多线程处理时，每个线程应当占⽤⼀个 channel，这样是线程安全的，需要避免线程间共享，这会造成 channel 上的 frame 乱序等问题，⽬前不少客户端库还提供了 channel pool 机制 channel 底层数据结构是Erlang 轻量量级进程，会占⽤用内存资源</p></blockquote><h4 id="_8-channel和connection关系" tabindex="-1">⑧ channel和connection关系 <a class="header-anchor" href="#_8-channel和connection关系" aria-label="Permalink to &quot;⑧ channel和connection关系&quot;">​</a></h4><blockquote><p>connection是单个的连接<br> channel是在connection基础上，由多个connection组成的（channel是双向的）</p></blockquote><h4 id="_1-生产者-producer" tabindex="-1">① 生产者（Producer） <a class="header-anchor" href="#_1-生产者-producer" aria-label="Permalink to &quot;①  生产者（Producer）&quot;">​</a></h4><blockquote><p>发送消息的应用</p></blockquote><h4 id="_2-连接-connection" tabindex="-1">② 连接（Connection） <a class="header-anchor" href="#_2-连接-connection" aria-label="Permalink to &quot;② 连接（Connection）&quot;">​</a></h4><blockquote><p>连接RabbitMQ和应用服务器的TCP连接</p></blockquote><h4 id="_3-通道-channel" tabindex="-1">③ 通道（Channel） <a class="header-anchor" href="#_3-通道-channel" aria-label="Permalink to &quot;③ 通道（Channel）&quot;">​</a></h4><blockquote><p>连接里的一个虚拟通道。当你通过消息队列发送或者接收消息时，这个操作都是通过通道进行的</p></blockquote><h4 id="_4-交换机-exchange" tabindex="-1">④ 交换机（Exchange） <a class="header-anchor" href="#_4-交换机-exchange" aria-label="Permalink to &quot;④ 交换机（Exchange）&quot;">​</a></h4><blockquote><p>交换机负责从生产者那里接收消息，并根据交换类型分发到对应的消息列队里。要实现消息的接收，一个队列必须到绑定一个交换机</p></blockquote><h4 id="_5-路由键-routing-key" tabindex="-1">⑤ 路由键（Routing Key） <a class="header-anchor" href="#_5-路由键-routing-key" aria-label="Permalink to &quot;⑤ 路由键（Routing Key）&quot;">​</a></h4><blockquote><p>路由键是供交换机查看并根据键来决定如何分发消息到列队的一个键。路由键可以说是消息的目的地址</p></blockquote><h4 id="_6-消息-message" tabindex="-1">⑥ 消息（Message） <a class="header-anchor" href="#_6-消息-message" aria-label="Permalink to &quot;⑥ 消息（Message）&quot;">​</a></h4><blockquote><p>由生产者通过RabbitMQ发送给消费者的信息</p></blockquote><h4 id="_7-绑定-binding" tabindex="-1">⑦ 绑定（Binding） <a class="header-anchor" href="#_7-绑定-binding" aria-label="Permalink to &quot;⑦ 绑定（Binding）&quot;">​</a></h4><blockquote><p>绑定是队列和交换机的一个关联连接</p></blockquote><h4 id="_8-队列-queue" tabindex="-1">⑧ 队列（Queue） <a class="header-anchor" href="#_8-队列-queue" aria-label="Permalink to &quot;⑧ 队列（Queue）&quot;">​</a></h4><blockquote><p>存储消息的缓存</p></blockquote><h4 id="_9-消费者-consumer" tabindex="-1">⑨ 消费者（Consumer） <a class="header-anchor" href="#_9-消费者-consumer" aria-label="Permalink to &quot;⑨ 消费者（Consumer）&quot;">​</a></h4><blockquote><p>接收消息的应用</p></blockquote></blockquote><h3 id="消息投递路径" tabindex="-1">消息投递路径 <a class="header-anchor" href="#消息投递路径" aria-label="Permalink to &quot;消息投递路径&quot;">​</a></h3><blockquote><p>producer-&gt;broker -&gt;exchange-&gt;queue-&gt;consumer</p><p>① 消息从producer 到exchange会返回一个confirmCallback<br> ② 消息从exchange-&gt;queue 投递失败则会返回一个returnCallback<br> 如果消息没有路由到queue,则丢弃消息（默认）<br> 如果消息没有路由到queue 返回给消息发送方，returnCallback</p><p><img src="'+t+'" alt="image-20220317104142386"></p><p>RabbitMQ里的消息流程</p><blockquote><p>生产者（producer）把消息发送给交换机。当你创建交换机的时候，你需要指定类型。交换机的类型接下来会讲到。<br> 交换机（exchange）接收消息并且负责对消息进行路由。根据交换机的类型，消息的多个属性会被使用，例如路由键。<br> 绑定（binding）需要从交换机到队列的这种方式来进行创建。在这个例子里，我们可以看到交换机有到两个不同队列的绑定。交换机根据消息的属性来把消息分发到不同的队列上。<br> 消息（message）消息会一直留在队列里直到被消费。<br> 消费者（consumer）处理消息。</p></blockquote></blockquote><h3 id="镜像队列-mirror-queue" tabindex="-1">镜像队列(Mirror Queue) <a class="header-anchor" href="#镜像队列-mirror-queue" aria-label="Permalink to &quot;镜像队列(Mirror Queue)&quot;">​</a></h3><p><img src="'+r+'" alt="image-20220317162751843"></p><h3 id="消费者利用率-consumer-utilisation" tabindex="-1">消费者利用率(Consumer utilisation) <a class="header-anchor" href="#消费者利用率-consumer-utilisation" aria-label="Permalink to &quot;消费者利用率(Consumer utilisation)&quot;">​</a></h3><p>消费者使⽤率：⼀段时间内处理消息的能⼒，反映了消费端的性能，越接近100% 越佳 Prefetch count: 在⽹络延时较⼤时，适当调⼤该值效果会⽐较明显</p><p><img src="'+p+'" alt="image-20220317163241474"></p><h3 id="死信机制-dead-letter" tabindex="-1">死信机制(Dead Letter) <a class="header-anchor" href="#死信机制-dead-letter" aria-label="Permalink to &quot;死信机制(Dead Letter)&quot;">​</a></h3><p><img src="'+c+'" alt="image-20220317181540968"></p><p>成为死信三种情况： 1、队列消息长度到达限制 2、消费者拒接消息，basicNack/basicReject 并且不把消息重新放入原目标队列，requeue=false 3、原队列存在消息过期设置，消息到达超时时间未被消费 队列绑定死信交换机</p><p>声明死信队列属性 DLX (x-dead-letter-exchange), DLK (x-dead-letter-routing-key) TTL 可以是队列级别或消息级别</p><p>死信队列不需要消费者 注意：进⼊死信队列的消息依旧遵循 FIFO 进⾏重新分发，即使已经到了过期时间</p><p><img src="'+i+'" alt="image-20220317163620486"></p><h3 id="延迟队列" tabindex="-1">延迟队列 <a class="header-anchor" href="#延迟队列" aria-label="Permalink to &quot;延迟队列&quot;">​</a></h3><p><img src="'+C+'" alt="image-20220317163703367"></p><h3 id="幂等" tabindex="-1">幂等 <a class="header-anchor" href="#幂等" aria-label="Permalink to &quot;幂等&quot;">​</a></h3><p>生产者消费者不用同一个连接工厂，防止有一个阻塞，影响所有</p><h3 id="消费端限流" tabindex="-1">消费端限流 <a class="header-anchor" href="#消费端限流" aria-label="Permalink to &quot;消费端限流&quot;">​</a></h3><p>消费端确认模式设置为手动后 rabbitmq:listener-container 中配置prefetch属性，设置消费端一次拉取多少条消息</p><h3 id="_11、ttl-time-to-live-存活-过期时间" tabindex="-1">11、TTL(time to live)（存活/过期时间） <a class="header-anchor" href="#_11、ttl-time-to-live-存活-过期时间" aria-label="Permalink to &quot;11、TTL(time to live)（存活/过期时间）&quot;">​</a></h3><p>当消息到达存活时间后 还没有被消费，会被自动清除 （可以对消息设置过期时间，也可以对整个队列设置过期时间，同时设置了这两个时间，就以短的时间算） 一般都是对队列整体设置过期时间 （消息过期后，只有消息在队列顶端，才会判断是否真正过期（在队列里看到移出掉）） 应用场景：多久之内没有支付就订单失效</p><h3 id="_12、特点" tabindex="-1">12、特点 <a class="header-anchor" href="#_12、特点" aria-label="Permalink to &quot;12、特点&quot;">​</a></h3><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><p>1、解耦 2、异步</p><p>发送短信，发送邮件等等</p><p>3、削峰</p><p><img src="'+A+'" alt="image-20220318101537980"></p><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><p>1、系统可用性降低。依赖服务也多，服务越容易挂掉。需要考虑MQ瘫痪的情况 2、系统复杂性提高。需要考虑消息丢失、消息重复消费、消息传递的顺序性 3、业务一致性。主业务和从属业务一致性的处理</p><h4 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h4><h5 id="_1-解耦" tabindex="-1">① 解耦 <a class="header-anchor" href="#_1-解耦" aria-label="Permalink to &quot;① 解耦&quot;">​</a></h5><p>⽤用户⽀支付后送积分，推送消息等</p><h5 id="_2-错峰流控" tabindex="-1">② 错峰流控 <a class="header-anchor" href="#_2-错峰流控" aria-label="Permalink to &quot;② 错峰流控&quot;">​</a></h5><p>缓解 web 流量和 DB 写能力不匹配</p><h5 id="_3-最终一致性" tabindex="-1">③ 最终⼀致性 <a class="header-anchor" href="#_3-最终一致性" aria-label="Permalink to &quot;③ 最终⼀致性&quot;">​</a></h5><p>数据写⼊缓存，通过 MQ 持久化到 DB</p><p><img src="'+h+'" alt="image-20220317172756928"></p><h5 id="_4-广播" tabindex="-1">④ 广播 <a class="header-anchor" href="#_4-广播" aria-label="Permalink to &quot;④ 广播&quot;">​</a></h5><h2 id="二、安装" tabindex="-1">二、安装 <a class="header-anchor" href="#二、安装" aria-label="Permalink to &quot;二、安装&quot;">​</a></h2><p>注意：erlang要和rabbitmq版本对应，否则可能安装失败</p><p>web页面启动：</p><p>rabbitmq-plugins.bat enable rabbitmq_management命令），windows\\linux下如果启动不成功，可能是没有在管理员的权限下进行运行。开启和关闭RabbitMQ的命令分别为net start\\stop RabbitMQ。</p><h2 id="三、web界面介绍" tabindex="-1">三、web界面介绍 <a class="header-anchor" href="#三、web界面介绍" aria-label="Permalink to &quot;三、web界面介绍&quot;">​</a></h2><h3 id="_1、overview" tabindex="-1">1、overview <a class="header-anchor" href="#_1、overview" aria-label="Permalink to &quot;1、overview&quot;">​</a></h3><p><img src="'+d+'" alt="image-20220316233101380"></p><p><img src="'+b+'" alt="image-20220316225604529"></p><p>Publish：producter pub消息的速率。 Publisher confirm：broker确认pub消息的速率。 Deliver(manual ack)：customer手动确认的速率。 Deliver( auto ack)：customer自动确认的速率。 Consumer ack：customer正在确认的速率。 Redelivered：正在传递&#39;redelivered&#39;标志集的消息的速率。 Get (manual ack)：响应basic.get而要求确认的消息的传输速率。 Get (auto ack)：响应于basic.get而发送不需要确认的消息的速率。 Return：将basic.return发送给producter的速率。 Disk read：queue从磁盘读取消息的速率。 Disk write：queue从磁盘写入消息的速率。</p><h3 id="_2、connection" tabindex="-1">2、connection <a class="header-anchor" href="#_2、connection" aria-label="Permalink to &quot;2、connection&quot;">​</a></h3><p><img src="'+m+'" alt="image-20220316233409456"></p><p>Virtual host：所属的虚拟主机。 Name：名称。 User name：使用的用户名。 State：当前的状态，running：运行中；idle：空闲。 SSL/TLS：是否使用ssl进行连接。 Protocol：使用的协议。 Channels：创建的channel的总数。 From client：每秒发出的数据包。 To client：每秒收到的数据包。</p><h3 id="_3、channels" tabindex="-1">3、channels <a class="header-anchor" href="#_3、channels" aria-label="Permalink to &quot;3、channels&quot;">​</a></h3><p><img src="'+y+'" alt="image-20220316233902333"></p><p>channel：名称。 Virtual host：所属的虚拟主机。 User name：使用的用户名。 Mode：渠道保证模式。 可以是以下之一，或者不是：C: confirm。T：transactional(事务)。 State ：当前的状态，running：运行中；idle：空闲。 Unconfirmed：待confirm的消息总数。 Prefetch：设置的prefetch的个数。 消费端确认模式设置为手动后，rabbitmq:listener-container 中配置<strong>prefetch</strong>属性，设置消费端一次拉取多少条消息</p><p>Unacker：待ack的消息总数。 publish：producter pub消息的速率。 confirm：producter confirm消息的速率。 deliver/get：consumer 获取消息的速率。 ack：consumer ack消息的速率。</p><h3 id="_4、exchanges" tabindex="-1">4、exchanges <a class="header-anchor" href="#_4、exchanges" aria-label="Permalink to &quot;4、exchanges&quot;">​</a></h3><p><img src="'+u+'" alt="image-20220316225727055"></p><p><img src="'+g+'" alt="image-20220316234203678"></p><p>Name：名称。 Type：exchange type，具体的type可以查看<a href="https://www.jianshu.com/p/5319b06f2e80" target="_blank" rel="noreferrer">RabbitMq系列之一：基础概念</a>。 Features：功能。 可以是以下之一，或者不是：D: 持久化。T：Internal，存在改功能表示这个exchange不可以被client用来推送消息，仅用来进行exchange和exchange之间的绑定，否则可以推送消息也可以绑定。 Message rate in：消息进入的速率。 Message rate out：消息出去的速率。</p><h3 id="_5、queue" tabindex="-1">5、queue <a class="header-anchor" href="#_5、queue" aria-label="Permalink to &quot;5、queue&quot;">​</a></h3><p><img src="'+D+'" alt="image-20220316225212741"></p><p>Name：名称。 Features：功能。 可以是以下之一，或者不是：D: 持久化。 State：当前的状态，running：运行中；idle：空闲。 Ready：待消费的消息总数。 Unacked：待应答的消息总数。 Total：总数 Ready+Unacked。 incoming：消息进入的速率。 deliver/get：消息获取的速率。 ack：消息应答的速率。</p><h3 id="_6、admin" tabindex="-1">6、admin <a class="header-anchor" href="#_6、admin" aria-label="Permalink to &quot;6、admin&quot;">​</a></h3><p><img src="'+v+'" alt="image-20220316225749075"></p><p><img src="'+f+'" alt="image-20220316234255805"></p><p>Name：名称。 Tags：角色标签，只能选取一个。 Can access virtual hosts：允许进入的vhost。 Has password：设置了密码。</p><h3 id="_7、清空队列消息" tabindex="-1">7、清空队列消息 <a class="header-anchor" href="#_7、清空队列消息" aria-label="Permalink to &quot;7、清空队列消息&quot;">​</a></h3><p><img src="'+k+'" alt="image-20221114103228605"></p><h2 id="四、代码" tabindex="-1">四、代码 <a class="header-anchor" href="#四、代码" aria-label="Permalink to &quot;四、代码&quot;">​</a></h2><h3 id="_1、基础配置" tabindex="-1">1、基础配置 <a class="header-anchor" href="#_1、基础配置" aria-label="Permalink to &quot;1、基础配置&quot;">​</a></h3><p><img src="'+q+`" alt="image-20220318102357535"></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">spring</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  rabbitmq</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    host</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">127.0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">1 #ip</span></span>
<span class="line"><span style="color:#A6ACCD;">    port</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5672</span><span style="color:#A6ACCD;">      #端口</span></span>
<span class="line"><span style="color:#A6ACCD;">    username</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> guest #账号</span></span>
<span class="line"><span style="color:#A6ACCD;">    password</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> guest #密码</span></span>
<span class="line"><span style="color:#A6ACCD;">    virtualHost</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">    #链接的虚拟主机</span></span>
<span class="line"><span style="color:#A6ACCD;">    addresses</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">127.0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">5672</span><span style="color:#A6ACCD;">     #多个以逗号分隔，与host功能一样。</span></span>
<span class="line"><span style="color:#A6ACCD;">    requestedHeartbeat</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span><span style="color:#A6ACCD;"> #指定心跳超时，单位秒，0为不指定；默认60s</span></span>
<span class="line"><span style="color:#A6ACCD;">    publisherConfirms</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;">  #发布确认机制是否启用</span></span>
<span class="line"><span style="color:#A6ACCD;">    publisherReturns</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #发布返回是否启用</span></span>
<span class="line"><span style="color:#A6ACCD;">    connectionTimeout</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #链接超时。单位ms。0表示无穷大不超时</span></span>
<span class="line"><span style="color:#A6ACCD;">    ### ssl相关</span></span>
<span class="line"><span style="color:#A6ACCD;">    ssl</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      enabled</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #是否支持ssl</span></span>
<span class="line"><span style="color:#A6ACCD;">      keyStore</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #指定持有SSL certificate的key store的路径</span></span>
<span class="line"><span style="color:#A6ACCD;">      keyStoreType</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #key store类型 默认PKCS12</span></span>
<span class="line"><span style="color:#A6ACCD;">      keyStorePassword</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #指定访问key store的密码</span></span>
<span class="line"><span style="color:#A6ACCD;">      trustStore</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #指定持有SSL certificates的Trust store</span></span>
<span class="line"><span style="color:#A6ACCD;">      trustStoreType</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #默认JKS</span></span>
<span class="line"><span style="color:#A6ACCD;">      trustStorePassword</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #访问密码</span></span>
<span class="line"><span style="color:#A6ACCD;">      algorithm</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #ssl使用的算法，例如，TLSv1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">      verifyHostname</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #是否开启hostname验证</span></span>
<span class="line"><span style="color:#A6ACCD;">    ### cache相关</span></span>
<span class="line"><span style="color:#A6ACCD;">    cache</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      channel</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        size</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #缓存中保持的channel数量</span></span>
<span class="line"><span style="color:#A6ACCD;">        checkoutTimeout</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创建一个新channel</span></span>
<span class="line"><span style="color:#A6ACCD;">      connection</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        mode</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #连接工厂缓存模式：CHANNEL 和 </span><span style="color:#C792EA;">CONNECTION</span></span>
<span class="line"><span style="color:#A6ACCD;">        size</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #缓存的连接数，只有是CONNECTION模式时生效</span></span>
<span class="line"><span style="color:#A6ACCD;">    ### listener</span></span>
<span class="line"><span style="color:#A6ACCD;">    listener</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">       type</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #两种类型，SIMPLE，</span><span style="color:#C792EA;">DIRECT</span></span>
<span class="line"><span style="color:#A6ACCD;">       ## simple类型</span></span>
<span class="line"><span style="color:#A6ACCD;">       simple</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">         concurrency</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #最小消费者数量</span></span>
<span class="line"><span style="color:#A6ACCD;">         maxConcurrency</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #最大的消费者数量</span></span>
<span class="line"><span style="color:#A6ACCD;">         transactionSize</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #指定一个事务处理的消息数量，最好是小于等于prefetch的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">         missingQueuesFatal</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #是否停止容器当容器中的队列不可用</span></span>
<span class="line"><span style="color:#A6ACCD;">         ## 与direct相同配置部分</span></span>
<span class="line"><span style="color:#A6ACCD;">         autoStartup</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #是否自动启动容器</span></span>
<span class="line"><span style="color:#A6ACCD;">         acknowledgeMode</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #表示消息确认方式，其有三种配置方式，分别是none、manual和auto；默认auto</span></span>
<span class="line"><span style="color:#A6ACCD;">         prefetch</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量</span></span>
<span class="line"><span style="color:#A6ACCD;">         defaultRequeueRejected</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">mode有关系）</span></span>
<span class="line"><span style="color:#A6ACCD;">         idleEventInterval</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #container events发布频率，单位ms</span></span>
<span class="line"><span style="color:#A6ACCD;">         ##重试机制</span></span>
<span class="line"><span style="color:#A6ACCD;">         retry</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">           stateless</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #有无状态</span></span>
<span class="line"><span style="color:#A6ACCD;">           enabled</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">  #是否开启</span></span>
<span class="line"><span style="color:#A6ACCD;">           maxAttempts</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #最大重试次数</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">默认3</span></span>
<span class="line"><span style="color:#A6ACCD;">           initialInterval</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #重试间隔</span></span>
<span class="line"><span style="color:#A6ACCD;">           multiplier</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #对于上一次重试的乘数</span></span>
<span class="line"><span style="color:#A6ACCD;">           maxInterval</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #最大重试时间间隔</span></span>
<span class="line"><span style="color:#A6ACCD;">       direct</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">         consumersPerQueue</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #每个队列消费者数量</span></span>
<span class="line"><span style="color:#A6ACCD;">         missingQueuesFatal</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">         #</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">其余配置看上方公共配置</span></span>
<span class="line"><span style="color:#A6ACCD;">     ## template相关</span></span>
<span class="line"><span style="color:#A6ACCD;">     template</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">       mandatory</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #是否启用强制信息；默认false</span></span>
<span class="line"><span style="color:#A6ACCD;">       receiveTimeout</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #\`</span><span style="color:#82AAFF;">receive</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">\`接收方法超时时间</span></span>
<span class="line"><span style="color:#A6ACCD;">       replyTimeout</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #\`</span><span style="color:#82AAFF;">sendAndReceive</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">\`超时时间</span></span>
<span class="line"><span style="color:#A6ACCD;">       exchange</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #默认的交换机</span></span>
<span class="line"><span style="color:#A6ACCD;">       routingKey</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #默认的路由</span></span>
<span class="line"><span style="color:#A6ACCD;">       defaultReceiveQueue</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #默认的接收队列</span></span>
<span class="line"><span style="color:#A6ACCD;">       ## retry重试相关</span></span>
<span class="line"><span style="color:#A6ACCD;">       retry</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">         enabled</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #是否开启</span></span>
<span class="line"><span style="color:#A6ACCD;">         maxAttempts</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #最大重试次数</span></span>
<span class="line"><span style="color:#A6ACCD;">         initialInterval</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #重试间隔</span></span>
<span class="line"><span style="color:#A6ACCD;">         multiplier</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #失败间隔乘数</span></span>
<span class="line"><span style="color:#A6ACCD;">         maxInterval</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> #最大间隔</span></span></code></pre></div><p>建议配置: channel=100左右 channel.checkout-timeout=3000 retry.maxAttempts=10</p><p>监控 机器指标 cpu 内存 磁盘 网络 机器: 堆积消费数量，队列的TPS 踩过的坑 ack 一定要注意 ，防止消息阻塞</p><p>连接时不要用guestt用户</p><h3 id="_2、-rabbitlistener原理" tabindex="-1">2、@RabbitListener原理 <a class="header-anchor" href="#_2、-rabbitlistener原理" aria-label="Permalink to &quot;2、@RabbitListener原理&quot;">​</a></h3><h3 id="_3、消息丢失" tabindex="-1">3、消息丢失！！ <a class="header-anchor" href="#_3、消息丢失" aria-label="Permalink to &quot;3、消息丢失！！&quot;">​</a></h3><h4 id="一、生产者消息丢失" tabindex="-1">一、生产者消息丢失 <a class="header-anchor" href="#一、生产者消息丢失" aria-label="Permalink to &quot;一、生产者消息丢失&quot;">​</a></h4><h5 id="_1、amqp提供的事务机制-效率低" tabindex="-1">1、amqp提供的事务机制（效率低） <a class="header-anchor" href="#_1、amqp提供的事务机制-效率低" aria-label="Permalink to &quot;1、amqp提供的事务机制（效率低）&quot;">​</a></h5><h5 id="_2、发送确认模式-publish-confirms" tabindex="-1">2、发送确认模式（publish confirms） <a class="header-anchor" href="#_2、发送确认模式-publish-confirms" aria-label="Permalink to &quot;2、发送确认模式（publish confirms）&quot;">​</a></h5><h6 id="_1-添加配置" tabindex="-1">① 添加配置 <a class="header-anchor" href="#_1-添加配置" aria-label="Permalink to &quot;① 添加配置&quot;">​</a></h6><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">spring.rabbitmq.publisher-confirms=true //表示没有发送到交换机会回调给指定方法</span></span>
<span class="line"><span style="color:#A6ACCD;">spring.rabbitmq.publisher-returns=true //表示exchange分发给queue失败回调指定方法</span></span></code></pre></div><h6 id="_2-异步重试" tabindex="-1">② 异步重试 <a class="header-anchor" href="#_2-异步重试" aria-label="Permalink to &quot;② 异步重试&quot;">​</a></h6><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">@Primary</span></span>
<span class="line"><span style="color:#A6ACCD;">public RabbitTemplate rabbitTemplate(CachingConnectionFactory connectionFactory, @Autowired RabbitProperties rabbitProperties, @Autowired ObjectProvider&lt;RabbitRetryTemplateCustomizer&gt; retryTemplateCustomizers) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    RabbitTemplate template = new RabbitTemplate(connectionFactory);</span></span>
<span class="line"><span style="color:#A6ACCD;"> template.setMessageConverter(new Jackson2JsonMessageConverter());</span></span>
<span class="line"><span style="color:#A6ACCD;"> template.afterPropertiesSet();</span></span>
<span class="line"><span style="color:#A6ACCD;"> template.setMandatory(true);</span></span>
<span class="line"><span style="color:#A6ACCD;"> template.setConfirmCallback(new RabbitTemplate.ConfirmCallback() {</span></span>
<span class="line"><span style="color:#A6ACCD;">        @Override</span></span>
<span class="line"><span style="color:#A6ACCD;"> public void confirm(CorrelationData correlationData, boolean ack, String cause) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            if (!ack) {//表示没有发送成功可以从correlationData拿消息id，保存到对应的数据库进行异步重试</span></span>
<span class="line"><span style="color:#A6ACCD;">                }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    });</span></span>
<span class="line"><span style="color:#A6ACCD;"> template.setReturnCallback(new RabbitTemplate.ReturnCallback() {</span></span>
<span class="line"><span style="color:#A6ACCD;">        @Override</span></span>
<span class="line"><span style="color:#A6ACCD;"> public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            //发送queue失败，保存到对应的数据库进行异步重试</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"><span style="color:#A6ACCD;">    });</span></span>
<span class="line"><span style="color:#A6ACCD;"> return template;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h6 id="_3-发送消息需要捕捉异常持久化到库" tabindex="-1">③ 发送消息需要捕捉异常持久化到库 <a class="header-anchor" href="#_3-发送消息需要捕捉异常持久化到库" aria-label="Permalink to &quot;③ 发送消息需要捕捉异常持久化到库&quot;">​</a></h6><p>AmqpConnectException<br> AmqpTimeoutException</p><h4 id="二、消费者消息丢失" tabindex="-1">二、消费者消息丢失 <a class="header-anchor" href="#二、消费者消息丢失" aria-label="Permalink to &quot;二、消费者消息丢失&quot;">​</a></h4><h6 id="_1-添加配置-1" tabindex="-1">① 添加配置 <a class="header-anchor" href="#_1-添加配置-1" aria-label="Permalink to &quot;① 添加配置&quot;">​</a></h6><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#手动ack配置</span></span>
<span class="line"><span style="color:#A6ACCD;">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span></span></code></pre></div><h6 id="_2-消费者实现channelawaremessagelistener接口" tabindex="-1">② 消费者实现ChannelAwareMessageListener接口 <a class="header-anchor" href="#_2-消费者实现channelawaremessagelistener接口" aria-label="Permalink to &quot;② 消费者实现ChannelAwareMessageListener接口&quot;">​</a></h6><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class FreshStoreCacheListener implements ChannelAwareMessageListener {</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"> @Override</span></span>
<span class="line"><span style="color:#A6ACCD;"> public void onMessage(Message message, Channel channel) throws Exception {</span></span>
<span class="line"><span style="color:#A6ACCD;">       //message.getMessageProperties().getDeliveryTag() mq消息id，false表示当前消费者的这个消息被消费</span></span>
<span class="line"><span style="color:#A6ACCD;">    channel.basicAck(message.getMessageProperties().getDeliveryTag(),false,);</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><ol><li>Client -&gt; confirm.select (channel 处于 confirm mode)</li><li>Broker -&gt; confirm.select-ok</li><li>Broker -&gt; basic.ack (返回包含 delivery-tag 来标识确认的消息)</li></ol><h3 id="_4、消费者获取消息" tabindex="-1">4、消费者获取消息 <a class="header-anchor" href="#_4、消费者获取消息" aria-label="Permalink to &quot;4、消费者获取消息&quot;">​</a></h3><p>在RabbitMQ中消费者有2种方式获取队列中的消息:</p><h4 id="a-basic-consume-推荐" tabindex="-1">a) basic.consume （推荐） <a class="header-anchor" href="#a-basic-consume-推荐" aria-label="Permalink to &quot;a)  basic.consume （推荐）&quot;">​</a></h4><p>一种是通过basic.consume命令，订阅某一个队列中的消息,channel会自动在处理完上一条消息之后，接收下一条消息。（同一个channel消息处理是串行的）。除非关闭channel或者取消订阅，否则客户端将会一直接收队列的消息。</p><h4 id="b-basic-get" tabindex="-1">b) basic.get <a class="header-anchor" href="#b-basic-get" aria-label="Permalink to &quot;b)  basic.get&quot;">​</a></h4><p>另外一种方式是通过basic.get命令主动获取队列中的消息，但是绝对不可以通过循环调用basic.get来代替basic.consume，这是因为basic.get RabbitMQ在实际执行的时候，是首先consume某一个队列，然后检索第一条消息，然后再取消订阅。如果是高吞吐率的消费者，最好还是建议使用basic.consume。</p><p>简单概括： consume是只要队列里面还有消息就一直取。 get是只取了队列里面的第一条消息。 因为get开销大，如果需要从一个队列取消息的话，首选consume方式，慎用循环get方式。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">__FILENAME__:/data/log/familymart/orderbackstage/order-service-backstage.log__SOURCE__:10.50.1.40__CONTENT__:2022-10-27 22:44:28.126 ERROR [,4e7c04a134c1ae15,4e7c04a134c1ae15,false] 4891 --- [nio-9941-exec-9] orderCheckSingle exception:</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">org.springframework.amqp.AmqpIOException: java.io.IOException</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.support.RabbitExceptionTranslator.convertRabbitAccessException(RabbitExceptionTranslator.java:70)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.connection.RabbitAccessor.convertRabbitAccessException(RabbitAccessor.java:113)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:2116)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:2062)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:2042)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitAdmin.initialize(RabbitAdmin.java:604)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitAdmin.lambda$null$10(RabbitAdmin.java:532)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.retry.support.RetryTemplate.doExecute(RetryTemplate.java:287)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.retry.support.RetryTemplate.execute(RetryTemplate.java:164)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitAdmin.lambda$afterPropertiesSet$11(RabbitAdmin.java:531)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.connection.CompositeConnectionListener.onCreate(CompositeConnectionListener.java:36)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.connection.CachingConnectionFactory.createConnection(CachingConnectionFactory.java:757)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.connection.ConnectionFactoryUtils.createConnection(ConnectionFactoryUtils.java:214)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:2089)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.execute(RabbitTemplate.java:2062)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.send(RabbitTemplate.java:1009)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1075)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.convertAndSend(RabbitTemplate.java:1068)</span></span>
<span class="line"><span style="color:#A6ACCD;">at cn.freemud.amqp.MQService.convertAndSend(MQService.java:67)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.UnequalLogService.syncOrderUnequalLogQueue(UnequalLogService.java:41)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.UnequalLogService$$FastClassBySpringCGLIB$$8f8e7e88.invoke(&lt;generated&gt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.UnequalLogService$$EnhancerBySpringCGLIB$$ee122ea3.syncOrderUnequalLogQueue(&lt;generated&gt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.OrderService.sendUnequalLogRequest(OrderService.java:4355)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.OrderService.checkTotalAmountForTakeout(OrderService.java:3544)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.OrderService.checkMethodForTakeout(OrderService.java:3266)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.OrderService.checkMethod(OrderService.java:3148)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.OrderService$$FastClassBySpringCGLIB$$acb8c8eb.invoke(&lt;generated&gt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.service.OrderService$$EnhancerBySpringCGLIB$$aed97664.checkMethod(&lt;generated&gt;)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.controller.OrderDashboardController.orderCheckSingle$original$SMwFsQCg(OrderDashboardController.java:171)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.controller.OrderDashboardController.orderCheckSingle$original$SMwFsQCg$accessor$43gZuzV5(OrderDashboardController.java)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.controller.OrderDashboardController$auxiliary$GJ4sGdqu.call(Unknown Source)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.freemud.controller.OrderDashboardController.orderCheckSingle(OrderDashboardController.java)</span></span>
<span class="line"><span style="color:#A6ACCD;">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></span>
<span class="line"><span style="color:#A6ACCD;">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></span>
<span class="line"><span style="color:#A6ACCD;">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span>
<span class="line"><span style="color:#A6ACCD;">at java.lang.reflect.Method.invoke(Method.java:498)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)</span></span>
<span class="line"><span style="color:#A6ACCD;">at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)</span></span>
<span class="line"><span style="color:#A6ACCD;">at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at brave.servlet.TracingFilter.doFilter(TracingFilter.java:65)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.cloud.sleuth.instrument.web.ExceptionLoggingFilter.doFilter(ExceptionLoggingFilter.java:50)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at brave.servlet.TracingFilter.doFilter(TracingFilter.java:82)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.cloud.sleuth.instrument.web.LazyTracingFilter.doFilter(TraceWebServletAutoConfiguration.java:138)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.StandardHostValve.invoke$original$3XxBrFN3(StandardHostValve.java:143)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.StandardHostValve.invoke$original$3XxBrFN3$accessor$uNkhv27f(StandardHostValve.java)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.StandardHostValve$auxiliary$YcmYtahz.call(Unknown Source)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span></span>
<span class="line"><span style="color:#A6ACCD;">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span></span>
<span class="line"><span style="color:#A6ACCD;">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span></span>
<span class="line"><span style="color:#A6ACCD;">at java.lang.Thread.run(Thread.java:748)</span></span>
<span class="line"><span style="color:#A6ACCD;">Caused by: java.io.IOException: null</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:129)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:125)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:147)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.ChannelN.queueDeclare(ChannelN.java:968)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.ChannelN.queueDeclare(ChannelN.java:46)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.connection.PublisherCallbackChannelImpl.queueDeclare(PublisherCallbackChannelImpl.java:348)</span></span>
<span class="line"><span style="color:#A6ACCD;">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></span>
<span class="line"><span style="color:#A6ACCD;">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></span>
<span class="line"><span style="color:#A6ACCD;">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span>
<span class="line"><span style="color:#A6ACCD;">at java.lang.reflect.Method.invoke(Method.java:498)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.connection.CachingConnectionFactory$CachedChannelInvocationHandler.invoke(CachingConnectionFactory.java:1184)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.sun.proxy.$Proxy304.queueDeclare(Unknown Source)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitAdmin.declareQueues(RabbitAdmin.java:709)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitAdmin.lambda$initialize$12(RabbitAdmin.java:606)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.invokeAction(RabbitTemplate.java:2151)</span></span>
<span class="line"><span style="color:#A6ACCD;">at org.springframework.amqp.rabbit.core.RabbitTemplate.doExecute(RabbitTemplate.java:2110)</span></span>
<span class="line"><span style="color:#A6ACCD;">... 121 common frames omitted</span></span>
<span class="line"><span style="color:#A6ACCD;">Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg &#39;x-dead-letter-exchange&#39; for queue &#39;fm_order_state_push_rapttl_queue&#39; in vhost &#39;fm_mg&#39;: received the value &#39;fm_order_exchange&#39; of type &#39;longstr&#39; but current is none, class-id=50, method-id=10)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:66)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:36)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:502)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel.privateRpc(AMQChannel.java:293)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:141)</span></span>
<span class="line"><span style="color:#A6ACCD;">... 134 common frames omitted</span></span>
<span class="line"><span style="color:#A6ACCD;">Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg &#39;x-dead-letter-exchange&#39; for queue &#39;fm_order_state_push_rapttl_queue&#39; in vhost &#39;fm_mg&#39;: received the value &#39;fm_order_exchange&#39; of type &#39;longstr&#39; but current is none, class-id=50, method-id=10)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.ChannelN.asyncShutdown(ChannelN.java:517)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.ChannelN.processAsync(ChannelN.java:341)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel.handleCompleteInboundCommand(AMQChannel.java:182)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:114)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQConnection.readFrame(AMQConnection.java:739)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQConnection.access$300(AMQConnection.java:47)</span></span>
<span class="line"><span style="color:#A6ACCD;">at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:666)</span></span>
<span class="line"><span style="color:#A6ACCD;">... 1 common frames omitted</span></span></code></pre></div><h2 id="使用场景-1" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-1" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><p><strong>解耦 削峰 填谷</strong></p><h2 id="难点" tabindex="-1">难点 <a class="header-anchor" href="#难点" aria-label="Permalink to &quot;难点&quot;">​</a></h2><p>消息重复 造成重复的原因：网络不可达 做幂等,每条消息都设唯一ID,存日志表防止重复消费</p><p>面试题整理 <a href="https://www.bilibili.com/video/BV1f94y167vh/?spm_id_from=333.788&amp;vd_source=9a81f56beba8d749b133042ede3fcf02" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1f94y167vh/?spm_id_from=333.788&amp;vd_source=9a81f56beba8d749b133042ede3fcf02</a></p><p>项目中用过哪些消息队列 选型的原因 大量消息堆积在mq 如何限流</p>`,111),_=[x];function w(j,P,M,R,S,T){return e(),n("div",null,_)}const $=a(F,[["render",w]]);export{E as __pageData,$ as default};
